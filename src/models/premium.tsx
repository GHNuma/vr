/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, {useEffect, useState} from 'react'
import {useAnimations, useGLTF} from '@react-three/drei'
import * as THREE from "three";
import ModalsInRooms from "../pages/tech-room/const/modals/in_room.tsx";
import StaticCollider from "../components/static-collider.tsx";
import InteractiveObject from "../components/interactive-object.tsx";

interface PremiumModelProps {
    position?: [number, number, number];
    rotation?: [number, number, number];
    scale?: [number, number, number];
}

interface GLTFResult extends THREE.Object3D {
    nodes: {
        [key: string]: THREE.Mesh;
    };
    materials: {
        [key: string]: THREE.Material;
    };
}

export function PremiumModel(props:PremiumModelProps) {
    const { nodes } = useGLTF('/models/PREMIUM.glb') as unknown as GLTFResult

    const doorAnimation = useGLTF("/animations/PREMIUM_DOOR.glb");
    const { animations: doorAnimations, scene: doorScene } = doorAnimation;
    const { actions: doorActions } = useAnimations(doorAnimations, doorScene);

    const floorAnimation = useGLTF("/animations/PREMIUM_FLOOR.glb");
    const { animations: floorAnimations, scene: floorScene } = floorAnimation;
    const { actions: floorActions } = useAnimations(floorAnimations, floorScene);

    const [isDoorPlaying, setIsDoorPlaying] = useState(false);
    const [isFloorPlaying, setIsFloorPlaying] = useState(false);

    const playDoorAnimation = () => {
        doorActions?.Animation?.play();
        setIsDoorPlaying(true);
    };

    const stopDoorAnimation = () => {
        doorActions?.Animation?.stop();
        setIsDoorPlaying(false);
    };

    const toggleDoorAnimation = () => {
        if (doorActions?.Animation?.isRunning()) {
            stopDoorAnimation();
        } else {
            playDoorAnimation();
        }
    };

    const playFloorAnimation = () => {
        floorActions?.Animation?.play();
        setIsFloorPlaying(true);
    };

    const stopFloorAnimation = () => {
        floorActions?.Animation?.stop();
        setIsFloorPlaying(false);
    };

    const toggleFloorAnimation = () => {
        if (floorActions?.Animation?.isRunning()) {
            stopFloorAnimation();
        } else {
            playFloorAnimation();
        }
    };


    const doorPosition = new THREE.Vector3();
    doorScene.traverse((child) => {
        if (child instanceof THREE.Mesh) {
            child.updateMatrixWorld();
            child.getWorldPosition(doorPosition);
        }
    });

    const floorPosition = new THREE.Vector3();
    floorScene.traverse((child) => {
        if (child instanceof THREE.Mesh) {
            child.updateMatrixWorld();
            child.getWorldPosition(floorPosition);
        }
    });
    const currentRoomData = ModalsInRooms.find((roomData) => roomData.name === 'PREMIUM');

    return (
        <group {...props} dispose={null}>
            {Object.entries(nodes).map(([key, node]) => {
                if (node instanceof THREE.Mesh) {
                    return (
                        <group key={node.name}>
                            <StaticCollider object={node} currentRoomData={currentRoomData} key={key}/>
                        </group>
                    );
                }
                return null;
            })}

            <group>
                <primitive object={doorScene} />
            </group>

            <group>
                <primitive object={floorScene} />
            </group>

            <InteractiveObject
                position={[doorPosition.x+0.1, doorPosition.y, doorPosition.z ]}
                data={{
                    name: "Cube009",
                    headerText:'modals.premium.electro_door',
                }}
                linkAR="https://example.com"
                isAnimationPlaying={isDoorPlaying}
                toggleAnimation={toggleDoorAnimation}
            />

            {/*<InteractiveObject*/}
            {/*    position={[floorPosition.x, floorPosition.y-20, floorPosition.z]}*/}
            {/*    data={{*/}
            {/*        name: "Interactive Door",*/}
            {/*        headerText: "Control Door Animation",*/}
            {/*    }}*/}
            {/*    linkAR="https://example.com"*/}
            {/*    isAnimationPlaying={isFloorPlaying}*/}
            {/*    toggleAnimation={toggleFloorAnimation}*/}
            {/*/>*/}
        </group>
    );
}

// useGLTF.preload('/models/PREMIUM.glb')
// useGLTF.preload("/animations/PREMIUM_DOOR.glb");
// useGLTF.preload("/animations/PREMIUM_FLOOR.glb");
