/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, {useEffect} from 'react'
import {useAnimations, useGLTF} from '@react-three/drei'
import * as THREE from "three";
import ModalsInRooms from "../pages/tech-room/const/modals/in_room.tsx";
import StaticCollider from "../components/static-collider.tsx";

interface ComfortModelProps {
    position?: [number, number, number];
    rotation?: [number, number, number];
    scale?: [number, number, number];
}

interface GLTFResult extends THREE.Object3D {
    nodes: {
        [key: string]: THREE.Mesh;
    };
    materials: {
        [key: string]: THREE.Material;
    };
}


export function ComfortModel(props:ComfortModelProps) {
    const { nodes } = useGLTF('/models/COMFORT.glb') as unknown as GLTFResult;

    const hatchAnimation = useGLTF("/animations/COMFORT_HATCH.glb");
    const { animations: hatchAnimations, scene: hatchScene } = hatchAnimation;
    const { actions: hatchActions } = useAnimations(hatchAnimations, hatchScene);

    const wallAnimation = useGLTF("/animations/COMFORT_WALL.glb");
    const { animations: wallAnimations, scene: wallScene } = wallAnimation;
    const { actions: wallActions } = useAnimations(wallAnimations, wallScene);

    useEffect(() => {
        if (hatchActions?.Animation) {
            hatchActions.Animation.play();
        }

    }, [hatchActions]);

    useEffect(() => {
        if (wallActions?.Animation) {
            wallActions.Animation.play();
        }

    }, [wallActions]);

    const currentRoomData = ModalsInRooms.find((roomData) => roomData.name === 'COMFORT');

    return (
        <group {...props} dispose={null}>
            {Object.entries(nodes).map(([key, node]) => {
                if (node instanceof THREE.Mesh) {
                    return (
                        <group key={node.name}>
                            <StaticCollider object={node} currentRoomData={currentRoomData} key={key}/>
                        </group>
                    );
                }
                return null;
            })}
            <primitive object={hatchScene}/>
            <primitive object={wallScene}/>

        </group>
    );
}

useGLTF.preload('/models/COMFORT.glb')
useGLTF.preload("/animations/COMFORT_HATCH.glb");
useGLTF.preload("/animations/COMFORT_WALL.glb");
